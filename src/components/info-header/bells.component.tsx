"use clientl";

import { useEffect, useState } from "react";
import { motion } from "framer-motion";
import { useMediaQuery } from "@/hooks";

export const getRandomInRange = (min: number, max: number) =>
  Math.floor(Math.random() * (max - min + 1) + min);

export const Bells = () => {
  const matches = useMediaQuery("(min-width: 1024px)");

  const possibleBells = [3, 5];
  const numOfNassas = possibleBells[getRandomInRange(0, 1)];

  const [positions, setPositions] = useState<Array<string>>([]);
  const [durations, setDurations] = useState<Array<number>>([]);

  useEffect(() => {
    const vh = 100 / numOfNassas;
    const toCycle = numOfNassas;
    const p: Array<string> = [];
    for (let i = 0; i < toCycle; i++) p.push(i * vh + "vw");

    setPositions(p);
  }, [numOfNassas]);

  useEffect(() => {
    const p: Array<number> = [];
    const getNumber = (): number => {
      let n = getRandomInRange(2, 6);
      if (p.length === 0 && n === 2) n = getRandomInRange(2, 6);
      if (p.includes(n)) n = getRandomInRange(2, 6);
      return n;
    };
    for (let i = 0; i < numOfNassas; i++) p.push(getNumber());
    setDurations(p);
  }, [numOfNassas]);

  if (positions.length === 0 || durations.length === 0) return <span />;

  return (
    <>
      {positions.map((p, i) => (
        <Nassa
          key={p}
          color={"black"}
          right={p}
          duration={durations[i]}
          width={matches ? 90 : 60}
          className="bg-opacity-20"
        />
      ))}
    </>
  );
};

interface NassaProps {
  color: string;
  right?: string | number;
  width?: string | number;
  duration?: number;
  className?: string;
}

const Nassa = ({
  color = "white",
  right = "50%",
  width = 90,
  duration = 6,
  className,
}: NassaProps) => {
  return (
    <div
      className="absolute bottom-0 pointer-events-none"
      style={{ right: right }}
    >
      <motion.svg
        width={width}
        viewBox="0 0 228 289"
        fill={color}
        initial={{ opacity: 0 }}
        xmlns="http://www.w3.org/2000/svg"
        className={className}
        animate={{
          y: "-30vh",
          opacity: [0, 0.05, 0],
          transition: {
            repeat: Infinity,
            repeatType: "loop",
            duration: duration,
            times: [0, 0.5, 1],
          },
        }}
      >
        <path
          d="M193.566 214.424L184.647 197.259L201.56 188.487L193.791 173.645L176.926 182.405L168.007 165.252L184.801 156.479L177.021 141.649L160.262 150.351L150.632 131.834L167.319 123.156L159.539 108.326L142.935 116.968L135.629 102.921C134.846 101.427 134.051 99.9453 133.257 98.4872L148.509 90.5565C148.189 89.9282 144.121 81.7486 141.227 75.4657L124.622 84.0721C120.808 78.1715 116.699 72.4662 112.311 66.9779L126.247 59.7348C137.825 68.8221 147.327 80.2761 154.119 93.3305L161.425 107.378L164.698 113.614L212.139 204.786L227 197.069L169.027 85.6369C158.69 65.7591 142.997 49.1665 123.722 37.7332C104.447 26.2998 82.3576 20.4814 59.9485 20.935L49.0963 0L34.2117 7.75284L19.339 15.482L30.2148 36.3815C16.9801 54.4488 9.06079 75.8537 7.35071 98.1808C5.64064 120.508 10.2078 142.868 20.5369 162.739L78.5098 274.171L93.3706 266.442L84.4517 249.288L97.0473 242.745L89.3026 227.926L76.7189 234.458L67.7999 217.317L80.3718 210.785L72.6271 195.931L60.0671 202.451L50.4366 183.934L62.9847 177.414L55.24 162.561L42.7155 169.069L35.3978 155.021C34.6269 153.516 33.8915 152.01 33.1918 150.493L44.0202 144.874C44.0202 144.874 41.2449 135.532 39.0507 128.574L27.4158 134.62C25.4591 127.532 24.2663 120.255 23.8577 112.914L33.8441 107.734C33.595 105.126 32.8122 96.5905 32.575 89.5133L24.6761 93.6506C25.817 85.1131 28.0162 76.7508 31.223 68.7561C31.4246 72.3124 31.7567 75.8688 32.2548 79.6385C32.658 82.697 33.1641 85.7871 33.7729 88.9088V89.0154C34.8166 94.4092 36.145 99.886 37.7461 105.41L37.8054 105.671C39.7824 112.423 42.1021 119.07 44.7555 125.587L44.8622 125.812C46.7836 130.554 48.8908 135.268 51.1837 139.954L51.6107 140.903C52.3461 142.396 53.1051 143.902 53.876 145.384L111.861 256.816L126.722 249.087L117.886 231.981L132.272 224.512L124.551 209.647L110.165 217.115L101.234 199.962L115.632 192.505L107.899 177.64L93.513 185.108L83.8469 166.591L98.2333 159.123L90.5005 144.257L76.114 151.738L68.7962 137.678C68.0253 136.196 67.2781 134.703 66.5546 133.209L80.1583 126.179C80.1583 126.025 76.3512 117.146 73.9554 110.46L59.7231 117.834C57.134 111.27 54.9049 104.57 53.0458 97.7641L63.1863 92.4651C62.8424 91.0426 61.0515 83.5505 58.9641 75.7858L49.4047 80.7529C47.8209 71.567 47.4422 62.214 48.278 52.9303L77.2763 108.646L84.9736 123.536L94.616 142.052L102.349 156.918L111.956 175.447L119.689 190.312L128.643 207.454L136.364 222.319L145.295 239.461L160.168 231.744L151.249 214.566L167.058 206.351L159.314 191.498L143.516 199.713L134.597 182.559L150.395 174.344L142.65 159.49L126.864 167.694L117.233 149.177L133.008 140.974L125.275 126.12L109.501 134.311L99.87 115.842L114.102 108.421C114.102 108.421 109.951 99.5778 106.82 93.3542L92.1372 100.988L82.5067 82.4599L97.071 74.8967C101.891 80.7111 106.366 86.8029 110.473 93.1408L118.325 106.252C119.131 107.71 119.938 109.192 120.697 110.685L128.003 124.733L135.676 139.622L145.307 158.139L153.04 173.005L161.958 190.158L169.703 205.012L178.622 222.177L193.566 214.424ZM110.011 49.291L100.926 54.0328C98.7077 51.7449 96.5373 49.54 94.1653 47.418C91.4018 44.8693 88.6147 42.5102 85.8631 40.3053C94.2558 42.282 102.368 45.3007 110.011 49.291ZM63.1507 45.2368C71.2326 49.8901 78.6758 55.5724 85.2938 62.1413L74.7856 67.5706L63.1507 45.2368Z"
          fill={color || "white"}
        />
      </motion.svg>
    </div>
  );
};
